var documenterSearchIndex = {"docs":
[{"location":"contents/#Contents","page":"Contents","title":"Contents","text":"","category":"section"},{"location":"contents/","page":"Contents","title":"Contents","text":"","category":"page"},{"location":"contents/#Index","page":"Contents","title":"Index","text":"","category":"section"},{"location":"contents/","page":"Contents","title":"Contents","text":"","category":"page"},{"location":"quickstart/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using WaterWaves1D\n\nparam = ( ϵ  = 1/2,\n          N  = 2^12,\n          L  = 10.,\n          T  = 5.,\n          dt = 0.001,\n          θ = 2.5 )\n\ninit    = BellCurve(param)\nmodel   = Matsuno(param)\nproblem = Problem(model, init, param)\n\nsolve!( problem )\n\nplot_solution(problem)\n","category":"page"},{"location":"basics/#Code-basics","page":"Code basics","title":"Code basics","text":"","category":"section"},{"location":"basics/#Abstract-types","page":"Code basics","title":"Abstract types","text":"","category":"section"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"TimeSolver (RK4, Euler, etc), \nAbstractModel (Cheng, Matsuno, etc), \nInitialData (Bump, SolitaryWave, etc)","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Instances are created from Parameters type.","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Parameters","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Une structure Problem  représente un problème donné que l'on va résoudre. Les données seront stockées dans data, qui est vide initialement.","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Problem","category":"page"},{"location":"basics/#WaterWaves1D.Problem","page":"Code basics","title":"WaterWaves1D.Problem","text":"Problem( model, initial, param ; verbose=true)\n\nor     Problem( model, initial, param, solver ; verbose=true)\n\nBuilds an initial-value problem which can then be solved (integrated in time) through solve!( problem )\n\nArguments\n\nmodel   :: AbstractModel,  the system of equation solved.\n\nMay be built, e.g., by WaterWaves(param);\n\ninitial :: InitialData, the initial data.\n\nMay be buit, e.g., by Init(η,v) where η is the surface deformation and v the derivative of the trace of the velocity potential at the surface;\n\nparam   :: NamedTuple, must contain values for\nN, the number of collocation points of the spatial grid\nL, the half-length of the spatial grid\nT, the final time of integration\ndt, the timestep\nadditionally, it may contain Ns the number of computed data or ns for storing data every ns computation steps (by default, every computed data is stored).\nsolver  :: TimeSolver, the solver for time integration (optional, default is explicit Runge-Kutta fourth order solver).\n\nMay be built, e.g., by RK4(model) or RK4_naive().\n\nInformation are not printed if keyword verbose = false (default is true).\n\n\n\n\n\n","category":"type"},{"location":"basics/#Initial-data","page":"Code basics","title":"Initial data","text":"","category":"section"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Bump","category":"page"},{"location":"basics/#Shallow-water-models","page":"Code basics","title":"Shallow water models","text":"","category":"section"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Cheng","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Matsuno","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"solve!(::Problem)","category":"page"},{"location":"basics/#WaterWaves1D.solve!-Tuple{Problem}","page":"Code basics","title":"WaterWaves1D.solve!","text":"solve!( problem; verbose=true )\n\nSolves (i.e. integrates in time) an initial-value problem\n\nThe argument problem should be of type Problem. It may be buit, e.g., by Problem(model, initial, param)\n\nInformation are not printed if keyword verbose = false (default is true).\n\n\n\n\n\n","category":"method"},{"location":"basics/#Main-program","page":"Code basics","title":"Main program","text":"","category":"section"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"epsilon = 1/2\nN       = 2^12\nL       = 10\nT       = 5\ndt      = 0.001\n\nparam = Parameters(epsilon,N,L,T,dt)\n\nproblems = [Problem(Cheng,Bump,param,RK4),Problem(Matsuno,Bump,param,RK4)]","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Cheng est le modèle utilisé. Il prend en valeur Bump, param et définit 3 fonction:","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"init qui construit une donnée initiale à partir de Bump : Uinit=init(Bump,param)\nFwave utilisée pour résoudre dt U= Fwave(U) (avec donnée initiale Uinit)\nbuild qui reconstruit la donnée finale (c'est l'application inverse de init). Ufin=final(U,param)","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"init(::Cheng)\ninit(::Matsuno)","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"build(::Cheng)\nbuild(::Matsuno)","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"simuls = [(Cheng,Bump,param1,RK4),(Cheng,Bump,param2,RK4)]","category":"page"},{"location":"basics/#RK4-solver","page":"Code basics","title":"RK4 solver","text":"","category":"section"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"RK4","category":"page"},{"location":"basics/#WaterWaves1D.RK4","page":"Code basics","title":"WaterWaves1D.RK4","text":"RK4(arguments;realdata)\n\nRunge-Kutta fourth order solver.\n\nConstructs an object of type TimeSolver to be used in Problem(model, initial, param; solver::TimeSolver)\n\nArguments can be either\n\nan object of type AbstractModel;\nan Array of size (N,m) where N is the number of collocation points and m the number of data (equations solved);\na Tuple (N,m) as above;\nan integer N and an integer m as above (the latter is optional, by default m=2).\na NamedTuple containing a key N and an integer m (the latter is optional, by default m=2).\n\nThe keyword argument realdata is optional, and determines whether pre-allocated vectors are real- or complex-valued. By default, they are either determined by the model in case 1., complex-valued otherwise.\n\n\n\n\n\n","category":"type"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"for p in problems\n    solve!(p)\nend","category":"page"},{"location":"#WaterWaves1D.jl","page":"Documentation","title":"WaterWaves1D.jl","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [WaterWaves1D]\nOrder   = [:type, :function]","category":"page"},{"location":"#WaterWaves1D.Data","page":"Documentation","title":"WaterWaves1D.Data","text":"Data structure to store the solution of the problem along time\n\n\n\n\n\n","category":"type"},{"location":"#WaterWaves1D.Init","page":"Documentation","title":"WaterWaves1D.Init","text":"Init(data)\ndata should contain either\n- a function η and a function v (in this order)\n- a Namedtuple with a function η and a function v\n- a mesh and two vectors Vector{Complex{Float64}} or Vector{Float64} representing η(mesh.x) and v(mesh.x) (in this order)\n- a mesh and a Namedtuple with a vector η and a vector v as above\n\n\n\n\n\n","category":"type"},{"location":"#WaterWaves1D.Mesh","page":"Documentation","title":"WaterWaves1D.Mesh","text":"`Mesh(args)`\n\nConstructs a mesh of collocation points and associated Fourier modes.\n\nArguments\n\nCan be either\n\nxmin , xmax , N; or\nL , N (same as above with xmin=-L and xmax=L); or\nparam :: NamedTuple, param contains N and L, then same as above; or\nx a vector of regularly spaced collocation points`.\n\nThe mesh as N collocation points regularly spaced between xmin (included) and xmax (excluded)\n\nReturn values\n\nm=Mesh(args) is of parametric type and offers with\n\nm.N: number of collocation points and Fourier modes;\nm.xmin: minimum of the mesh;\nm.xmax: maximum of the mesh;\nm.dx: distance between two collocation points;\nm.x: the vector of collocation points;\nm.kmin: minimum of Fourier modes;\nm.kmax: maximum of Fourier modes;\nm.dk: distance between two Fourier modes;\nm.k: the vector of Fourier modes.\n\n\n\n\n\n","category":"type"},{"location":"#WaterWaves1D.Times","page":"Documentation","title":"WaterWaves1D.Times","text":"`Times(dt, tfin; ns, Ns)`\n\nConstructs a mesh of times.\n\nArguments\n\ndt  : timestep;\ntfin: final time;\nns  : data are stored every ns computations (optional, default = 1).\nNs  : Ns data (in addition to the initial datum) are stored (optional, by default `floor( tfin/dt)).\n\nIf both Ns and ns are given, Ns overrules ns.\n\nReturn values\n\nt=Times(args) is of parametric type and offers\n\nt.Nc: number of computed times;\nt.Ns: number of stored times;\nt.ns: number of computed times between two stored times;\nt.tfin: the final time;\nt.dt: the timestep;\nt.tc : the vector of computed times;\nt.ts: the vector of stored times.\n\n\n\n\n\n","category":"type"},{"location":"#WaterWaves1D.create_animation-Tuple{Any}","page":"Documentation","title":"WaterWaves1D.create_animation","text":"create_animation( problems; name::String, kwargs... )\n\nCreate an animation showing the evolution of initial-value problems.\n\nArgument problems is either an element or a collection (vector, list, etc.) of elements of type Problem.\n\nThe animation is saved as name.gif if name is provided.\n\nOther keyword arguments are as follows\n\nxlims allows to specifies the x axis limits for the surface deformation. If nothing is provided (default), then the full numerical basin is represented.\nylims allows to specifies the y axis limits for the surface deformation. If nothing is provided (default), then the limits are determined from the initial data. If anything but a Tuple is provided, the axis limits evolve with the solution.\nvlims and flims are as above, but for the velocity and Fourier coefficients plots.\nNframes gives the (maximal) number of frames in the animation.\nother arguments of plot_solution!\n\nReturn anim, an animation, which can then generate (for instance) a gif through gif(anim, \"my_name.gif\", fps=15).\n\n\n\n\n\n","category":"method"},{"location":"#WaterWaves1D.interpolate-Tuple{Mesh, Any, Any}","page":"Documentation","title":"WaterWaves1D.interpolate","text":"interpolate(mesh,vector,x)\n\nInterpolate a vector vector defined on a uniform collocation grid defined by mesh, on collocation points given by x.\n\nReturns new_vector the vector of values on collocation points.\n\n\n\n\n\n","category":"method"},{"location":"#WaterWaves1D.interpolate-Tuple{Mesh, Any}","page":"Documentation","title":"WaterWaves1D.interpolate","text":"interpolate(mesh,vector;n=2^3)\n\nInterpolate a vector vector defined on a uniform collocation grid defined by mesh.\n\nReturns (new_mesh,new_vector) a new uniform mesh with n times as many values, and the vector of values on collocation points.\n\n\n\n\n\n","category":"method"},{"location":"#WaterWaves1D.plot_difference!-Tuple{Any, Any}","page":"Documentation","title":"WaterWaves1D.plot_difference!","text":"plot_difference!( plt, pairs ; t,x,interpolation,compression,fast,surface,velocity,fourier,label )\n\nPlots in plt the difference between solutions of initial-value problems at a given time.\n\nArgument\n\npairs is a either a pair or a collection (vector, list, etc.) of pairs of type Problem.\n\nKeyword arguments (all optional)\n\nt is the time. If not provided, then the last computed time is plotted.\nif a vector x is provided and if possible, the solution is interpolated to the collocation points x.\nif interpolation is provided as an integer, the solution is interpolated on as many collocation points (if true, then the value 2^3 is chosen, default is false).\nif fast = false (default is false), then the second problem is interpolated to the collocation points of the first problem.\nif compression is provided as an integer m, only one in m points are plotted (if true, then the value 2^3 is chosen, default is false).\nsurface, velocity and fourier (booleans) determine respectively whether surface deformation, η, tangential velocity, v, and the Fourier coefficients of η (in log-scale) are plotted.\nlabel defines the label(s) if provided (otherwise labels are inferred from the models)\n\n\n\n\n\n","category":"method"},{"location":"#WaterWaves1D.plot_difference-Tuple{Any}","page":"Documentation","title":"WaterWaves1D.plot_difference","text":"plot_difference( pairs; t,x, interpolation,compression, surface,velocity,fourier, label )\n\nSame as plot_difference! but generates and returns the plot.\n\n\n\n\n\n","category":"method"},{"location":"#WaterWaves1D.plot_solution!-Tuple{Any, Any}","page":"Documentation","title":"WaterWaves1D.plot_solution!","text":"plot_solution!( plt; problems; t,x,interpolation,compression,surface,velocity,fourier,label )\n\nPlots in plt the solution of initial-value problems at a given time.\n\nArgument\n\nproblems is either an element or a collection (vector, list, etc.) of elements of type Problem.\n\nKeyword arguments (all optional)\n\nt is the time. If not provided, then the last computed time is plotted.\nif a vector x is provided and if possible, the solution is interpolated to the collocation points x.\nif interpolation is provided as an integer, the solution is interpolated on as many collocation points (if true, then the value 2^3 is chosen, default is false).\nif compression is provided as an integer m, only one in m points are plotted (if true, then the value 2^3 is chosen, default is false).\nsurface, velocity and fourier (booleans) determine respectively whether surface deformation, η, tangential velocity, v, and the Fourier coefficients of η (in log-scale) are plotted.\nlabel defines the label(s) if provided (otherwise labels are inferred from the models)\n\n\n\n\n\n","category":"method"},{"location":"#WaterWaves1D.plot_solution-Tuple{Any}","page":"Documentation","title":"WaterWaves1D.plot_solution","text":"plot_solution( problems; t,x, interpolation,compression, surface,velocity,fourier, label )\n\nSame as plot_solution! but generates and returns the plot.\n\n\n\n\n\n","category":"method"},{"location":"#WaterWaves1D.solve!-Tuple{Any}","page":"Documentation","title":"WaterWaves1D.solve!","text":"solve!( problems; verbose=true )\n\nSolves (i.e. integrates in time) a collection of initial-value problems.\n\nThe argument problems should be a collection (list, array...) of elements of type Problem.\n\n\n\n\n\n","category":"method"}]
}
