var documenterSearchIndex = {"docs":
[{"location":"contents/#Contents","page":"Contents","title":"Contents","text":"","category":"section"},{"location":"contents/","page":"Contents","title":"Contents","text":"","category":"page"},{"location":"contents/#Index","page":"Contents","title":"Index","text":"","category":"section"},{"location":"contents/","page":"Contents","title":"Contents","text":"","category":"page"},{"location":"basics/#Code-basics","page":"Code basics","title":"Code basics","text":"","category":"section"},{"location":"basics/#Abstract-types","page":"Code basics","title":"Abstract types","text":"","category":"section"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"TimeSolver (RK4, Euler, etc), \nAbstractModel (Cheng, Matsuno, etc), \nInitialData (Bump, SolitaryWave, etc)","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Instances are created from Parameters type.","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Parameters","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Une structure Problem  représente un problème donné que l'on va résoudre. Les données seront stockées dans data, qui est vide initialement.","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Problem","category":"page"},{"location":"basics/#ShallowWaterModels.Problem","page":"Code basics","title":"ShallowWaterModels.Problem","text":"Problem( model, initial, param ; verbose=true)\n\nor     Problem( model, initial, param, solver ; verbose=true)\n\nBuilds an initial-value problem which can then be solved (integrated in time) through solve!( problem )\n\nArguments\n\nmodel   :: AbstractModel,  the system of equation solved.\n\nMay be built, e.g., by WaterWaves(param);\n\ninitial :: InitialData, the initial data.\n\nMay be buit, e.g., by Init(η,v) where η is the surface deformation and v the derivative of the trace of the velocity potential at the surface;\n\nparam   :: NamedTuple, must contain values for\nN, the number of collocation points of the spatial grid\nL, the half-length of the spatial grid\nT, the final time of integration\ndt, the timestep\nadditionally, it may contain Ns the number of computed data or ns for storing data every ns computation steps (by default, every computed data is stored).\nsolver  :: TimeSolver, the solver for time integration (optional, default is explicit Runge-Kutta fourth order solver).\n\nMay be built, e.g., by RK4(model) or RK4_naive().\n\nInformation are not printed if keyword verbose = false (default is true).\n\n\n\n\n\n","category":"type"},{"location":"basics/#Initial-data","page":"Code basics","title":"Initial data","text":"","category":"section"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Bump","category":"page"},{"location":"basics/#Shallow-water-models","page":"Code basics","title":"Shallow water models","text":"","category":"section"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Cheng","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Matsuno","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"solve!(::Problem)","category":"page"},{"location":"basics/#ShallowWaterModels.solve!-Tuple{Problem}","page":"Code basics","title":"ShallowWaterModels.solve!","text":"solve!( problem; verbose=true )\n\nSolves (i.e. integrates in time) an initial-value problem\n\nThe argument problem should be of type Problem. It may be buit, e.g., by Problem(model, initial, param)\n\nInformation are not printed if keyword verbose = false (default is true).\n\n\n\n\n\n","category":"method"},{"location":"basics/#Main-program","page":"Code basics","title":"Main program","text":"","category":"section"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"epsilon = 1/2\nN       = 2^12\nL       = 10\nT       = 5\ndt      = 0.001\n\nparam = Parameters(epsilon,N,L,T,dt)\n\nproblems = [Problem(Cheng,Bump,param,RK4),Problem(Matsuno,Bump,param,RK4)]","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"Cheng est le modèle utilisé. Il prend en valeur Bump, param et définit 3 fonction:","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"init qui construit une donnée initiale à partir de Bump : Uinit=init(Bump,param)\nFwave utilisée pour résoudre dt U= Fwave(U) (avec donnée initiale Uinit)\nbuild qui reconstruit la donnée finale (c'est l'application inverse de init). Ufin=final(U,param)","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"init(::Cheng)\ninit(::Matsuno)","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"build(::Cheng)\nbuild(::Matsuno)","category":"page"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"simuls = [(Cheng,Bump,param1,RK4),(Cheng,Bump,param2,RK4)]","category":"page"},{"location":"basics/#RK4-solver","page":"Code basics","title":"RK4 solver","text":"","category":"section"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"RK4","category":"page"},{"location":"basics/#ShallowWaterModels.RK4","page":"Code basics","title":"ShallowWaterModels.RK4","text":"RK4(arguments;realdata)\n\nRunge-Kutta fourth order solver.\n\nConstructs an object of type TimeSolver to be used in Problem(model, initial, param; solver::TimeSolver)\n\nArguments can be either\n\nan object of type AbstractModel;\nan Array of size (N,m) where N is the number of collocation points and m the number of data (equations solved);\na Tuple (N,m) as above;\nan integer N and an integer m as above (the latter is optional, by default m=2).\na NamedTuple containing a key N and an integer m (the latter is optional, by default m=2).\n\nThe keyword argument realdata is optional, and determines whether pre-allocated vectors are real- or complex-valued. By default, they are either determined by the model in case 1., complex-valued otherwise.\n\n\n\n\n\n","category":"type"},{"location":"basics/","page":"Code basics","title":"Code basics","text":"for p in problems\n    solve!(p)\nend","category":"page"},{"location":"#ShallowWaterModels.jl","page":"Documentation","title":"ShallowWaterModels.jl","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [ShallowWaterModels]\nOrder   = [:type, :function]","category":"page"},{"location":"#ShallowWaterModels.BellCurve","page":"Documentation","title":"ShallowWaterModels.BellCurve","text":"BellCurve(param)\nparam should contain a value theta\n\neta = 2^(-x^theta)\n\nv = 0\n\n\n\n\n\n","category":"type"},{"location":"#ShallowWaterModels.Data","page":"Documentation","title":"ShallowWaterModels.Data","text":"Data structure to store the solution of the problem along time\n\n\n\n\n\n","category":"type"},{"location":"#ShallowWaterModels.Init","page":"Documentation","title":"ShallowWaterModels.Init","text":"Init(data)\ndata should contain either\n- a function η and a function v (in this order)\n- a Namedtuple with a function η and a function v\n- a mesh and two vectors Vector{Complex{Float64}} or Vector{Float64} representing η(mesh.x) and v(mesh.x) (in this order)\n- a mesh and a Namedtuple with a vector η and a vector v as above\n\n\n\n\n\n","category":"type"},{"location":"#ShallowWaterModels.Mesh","page":"Documentation","title":"ShallowWaterModels.Mesh","text":"`Mesh(args)`\n\nConstructs a mesh of collocation points and associated Fourier modes.\n\nArguments\n\nCan be either\n\nxmin , xmax , N; or\nL , N (same as above with xmin=-L and xmax=L); or\nparam :: NamedTuple, param contains N and L, then same as above.\n\nThe mesh as N collocation points regularly spaced between xmin (included) and xmax (excluded)\n\nReturn values\n\nm=Mesh(args) is of parametric type and offers with\n\nm.N: number of collocation points and Fourier modes;\nm.xmin: minimum of the mesh;\nm.xmax: maximum of the mesh;\nm.dx: distance between two collocation points;\nm.x: the vector of collocation points;\nm.kmin: minimum of Fourier modes;\nm.kmax: maximum of Fourier modes;\nm.dk: distance between two Fourier modes;\nm.k: the vector of Fourier modes.\n\n\n\n\n\n","category":"type"},{"location":"#ShallowWaterModels.PseudoSpectral","page":"Documentation","title":"ShallowWaterModels.PseudoSpectral","text":"PseudoSpectral(param;kwargs)\n\nDefine an object of type AbstractModel in view of solving the initial-value problem for the modified water waves expansion proposed by West et al., Craig-Sulem, etc.\n\nArgument\n\nparam is of type NamedTuple and must contain\n\ndimensionless parameters ϵ (nonlinearity) and μ (dispersion);\nnumerical parameters to construct the mesh of collocation points as mesh = Mesh(param)\n\nOptional keyword arguments\n\nν: shallow/deep water multiplication factor. By default, ν=1 if μ≦1 and ν=1/√μ otherwise. Set the infinite-layer case if ν=0 (or μ=Inf).\norder :: Int: the order of the expansion; linear system if 1, quadratic if 2, cubic if 3, quartic if 4 (default and other values yield 2);\nδ: parameter of smooth regularization operator (default is 0, i.e. no regularization);\nreg: order of the smooth regularization operator (default is 1);\nktol: tolerance of the low-pass Krasny filter (default is 0, i.e. no filtering);\ndealias: dealiasing with Orlicz rule 1-dealias/(dealias+2) (default is 0, i.e. no dealiasing);\nverbose: prints information if true (default is true).\n\nReturn values\n\nGenerate necessary ingredients for solving an initial-value problem via solve! and in particular\n\na function PseudoSpectral.f! to be called in the time-integration solver;\na function PseudoSpectral.mapto which from (η,v) of type InitialData provides the raw data matrix on which computations are to be executed;\na function PseudoSpectral.mapfro which from such data matrix returns the Tuple of real vectors (η,v), where\nη is the surface deformation;\nv is the derivative of the trace of the velocity potential.\n\n\n\n\n\n","category":"type"},{"location":"#ShallowWaterModels.Times","page":"Documentation","title":"ShallowWaterModels.Times","text":"`Times(dt, tfin; ns, Ns)`\n\nConstructs a mesh of times.\n\nArguments\n\ndt  : timestep;\ntfin: final time;\nns  : data are stored every ns computations (optional, default = 1).\nNs  : Ns data (in addition to the initial datum) are stored (optional, by default `floor( tfin/dt)).\n\nIf both Ns and ns are given, Ns overrules ns.\n\nReturn values\n\nt=Times(args) is of parametric type and offers\n\nt.Nc: number of computed times;\nt.Ns: number of stored times;\nt.ns: number of computed times between two stored times;\nt.tfin: the final time;\nt.dt: the timestep;\nt.tc : the vector of computed times;\nt.ts: the vector of stored times.\n\n\n\n\n\n","category":"type"},{"location":"#ShallowWaterModels.WhithamGreenNaghdi","page":"Documentation","title":"ShallowWaterModels.WhithamGreenNaghdi","text":"WhithamGreenNaghdi(param;kwargs)\n\nDefine an object of type AbstractModel in view of solving the initial-value problem for the modified Green-Naghdi model proposed by V. Duchêne, S. Israwi and R. Talhouk.\n\nArgument\n\nparam is of type NamedTuple and must contain\n\ndimensionless parameters ϵ (nonlinearity) and μ (dispersion);\nnumerical parameters to construct the mesh of collocation points as mesh = Mesh(param).\n\nKeywords\n\nSGN: if true computes the Serre-Green-Naghdi (SGN) instead of Whitham-Green-Naghdi (WGN) system (default is false);\niterative: solve the elliptic problem through GMRES if true, LU decomposition if false (default is true);\nprecond: use a (left) preconditioner for GMRES if true (default), choose precond as the preconditioner if provided;\ngtol: relative tolerance of the GMRES algorithm (default is 1e-14);\nrestart: the corresponding option of the GMRES algorithm (default is 100);\nmaxiter: the corresponding option of GMRES (default is nothing);\nktol: tolerance of the Krasny filter (default is 0, i.e. no filtering);\ndealias: dealiasing with Orlicz rule 1-dealias/(dealias+2) (default is 0, i.e. no dealiasing);\nverbose: prints information if true (default is true).\n\nReturn values\n\nGenerate necessary ingredients for solving an initial-value problem via solve! and in particular\n\na function WhithamGreenNaghdi.f! to be called in the time-integration solver;\na function WhithamGreenNaghdi.mapto which from (η,v) of type InitialData provides the raw data matrix on which computations are to be executed;\na function WhithamGreenNaghdi.mapfro which from such data matrix returns the Tuple of real vectors (η,v), where\nη is the surface deformation;\nv is the derivative of the trace of the velocity potential;\nadditionally, a handy function WhithamGreenNaghdi.mapfrofull which from data matrix returns the Tuple of real vectors (η,v,u), where\n\n- `u` corresponds to the layer-averaged velocity.\n\n\n\n\n\n","category":"type"},{"location":"#ShallowWaterModels.interpolate-Tuple{Mesh, Any, Any}","page":"Documentation","title":"ShallowWaterModels.interpolate","text":"interpolate(mesh,vector,x)\n\nInterpolate a vector vector defined on a uniform collocation grid defined by mesh, on collocation points given by x.\n\nReturns new_vector the vector of values on collocation points.\n\n\n\n\n\n","category":"method"},{"location":"#ShallowWaterModels.interpolate-Tuple{Mesh, Any}","page":"Documentation","title":"ShallowWaterModels.interpolate","text":"interpolate(mesh,vector;n=2^4)\n\nInterpolate a vector vector defined on a uniform collocation grid defined by mesh.\n\nReturns (new_mesh,new_vector) a new uniform mesh with n times as many values, and the vector of values on collocation points.\n\n\n\n\n\n","category":"method"},{"location":"#ShallowWaterModels.loadpb-Tuple{String}","page":"Documentation","title":"ShallowWaterModels.loadpb","text":"`loadpb(name::String)`\n\nLoads the contents of the file name.jld as a problem of type :Problem.\n\n\n\n\n\n","category":"method"},{"location":"#ShallowWaterModels.solve!-Tuple{Any}","page":"Documentation","title":"ShallowWaterModels.solve!","text":"solve!( problems; verbose=true )\n\nSolves (i.e. integrates in time) a collection of initial-value problems.\n\nThe argument problems should be a collection (list, array...) of elements of type Problem.\n\n\n\n\n\n","category":"method"}]
}
