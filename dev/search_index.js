var documenterSearchIndex = {"docs":
[{"location":"quickstart/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Define parameters of your problem","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using Plots\nusing WaterWaves1D\n\nparam = (\n    # Physical parameters. Variables are non-dimensionalized as in Lannes, The water waves problem, isbn:978-0-8218-9470-5\n    μ  = 1,     # shallow-water dimensionless parameter\n    ϵ  = 1/4,   # nonlinearity dimensionless parameter\n    # Numerical parameters\n    N  = 2^11,  # number of collocation points\n    L  = 10,    # half-length of the numerical tank (-L,L)\n    T  = 5,     # final time of computation\n    dt = 0.01, # timestep\n                );","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Define initial data","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"z(x) = exp.(-abs.(x).^4); # surface deformation\nv(x) = 0*exp.(-x.^2);     # zero initial velocity\ninit = Init(z,v);         # generate the initial data with correct type","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Set up initial-value problems for different models to compare","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"model1=WaterWaves(param) # The water waves system\nmodel2=WWn(param;n=2,dealias=1,δ=1/10) # The quadratic model (WW2)\n# type `?WaterWaves` or `?WWn` to see details and signification of arguments\nproblem1=Problem(model1, init, param, solver=RK4(model1)) ;\nproblem2=Problem(model2, init, param, solver=RK4(model2)) ;","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Solve numerical time integration","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"solve!","category":"page"},{"location":"quickstart/#WaterWaves1D.solve!","page":"Quickstart","title":"WaterWaves1D.solve!","text":"solve!( problem :: Problem; verbose=true )\n\nSolve (i.e. integrate in time) an initial-value problem\n\nThe argument problem should be of type Problem. It may be buit, e.g., by Problem(model, initial, param)\n\nInformation are not printed if keyword argument verbose = false (default is true).\n\n\n\n\n\nsolve!( problems; verbose=true )\n\nSolve (i.e. integrate in time) a collection of initial-value problems.\n\nThe argument problems should be a collection (list, array...) of elements of type Problem.\n\nInformation are not printed if keyword argument verbose = false (default is true).\n\n\n\n\n\n","category":"function"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"solve!(problem1);\nsolve!(problem2);","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Plot solutions at final time","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"plot_solution([problem1 problem2];fourier=false)","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Generate an animation","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"anim = create_animation([problem1 problem2];fourier=false,ylims=(-0.5,1))\ngif(anim, \"assets/example.gif\", fps=15); nothing # hide","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"(Image: )","category":"page"},{"location":"models/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"Modules = [WaterWaves1D]\nOrder   = [:type]\nPages   = [\n\"Boussinesq.jl\",\n\"DeepQuadratic.jl\",\n\"IsobeKakinuma.jl\",\n\"Matsuno.jl\",\n\"NonHydrostatic.jl\",\n\"SerreGreenNaghdi.jl\",\n\"SquareRootDepth.jl\",\n\"WWn.jl\",\n\"WaterWaves.jl\",\n\"WhithamBoussinesq.jl\",\n\"WhithamGreenNaghdi.jl\",\n\"modifiedMatsuno.jl\"]","category":"page"},{"location":"models/#WaterWaves1D.Boussinesq","page":"Models","title":"WaterWaves1D.Boussinesq","text":"Boussinesq(param;kwargs)\n\nDefine an object of type AbstractModel in view of solving the initial-value problem for abcd-Boussinesq models (with b=d and c=0). See Bona, Chen, and Saut\n\nArgument\n\nparam is of type NamedTuple and must contain\n\ndimensionless parameters ϵ (nonlinearity) and μ (dispersion);\nnumerical parameters to construct the mesh of collocation points as mesh = Mesh(param).\n\nOptional keyword arguments\n\ntwo parameters a (default is -1/3) and b (default is +1/3) which determine the model solved. You need a+2*b=1/3 for validity as a long wave model (without surface tension).\nktol: tolerance of the low-pass Krasny filter (default is 0, i.e. no filtering);\ndealias: dealiasing with Orlicz rule 1-dealias/(dealias+2) (default is 0, i.e. no dealiasing);\nlabel: a label for future references (default is \"Boussinesq\");\n\nReturn values\n\nGenerate necessary ingredients for solving an initial-value problem via solve!:\n\na function Boussinesq.f! to be called in explicit time-integration solvers;\na function Boussinesq.mapto which from (η,v) of type InitialData provides the raw data matrix on which computations are to be executed;\na function Boussinesq.mapfro which from such data matrix returns the Tuple of real vectors (η,v), where\nη is the surface deformation;\nv is the derivative of the trace of the velocity potential.\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.SolitaryWB","page":"Models","title":"WaterWaves1D.SolitaryWB","text":"SolitaryWB(param; kwargs)\n\nBuild the initial data associated with SolitaryWaveWhithamBoussinesq(param; kwargs), of type InitialData, to be used in initial-value problems Problem(model, initial::InitialData, param).\n\n\n\nSolitaryWB(c; ϵ=1,μ=1,N=2^12,kwargs)\n\nBuild the initial data with velocity c, dimensionless parameters ϵ and μ, and number of collocation points N, and kwargs the other (optional) keyword arguments as above.\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.WhithamBoussinesq","page":"Models","title":"WaterWaves1D.WhithamBoussinesq","text":"WhithamBoussinesq(param;kwargs)\n\nDefine an object of type AbstractModel in view of solving the initial-value problem for a Boussinesq-type model with full-dispersion property.\n\nArgument\n\nparam is of type NamedTuple and must contain\n\ndimensionless parameters ϵ (nonlinearity) and μ (dispersion);\nnumerical parameters to construct the mesh of collocation points as mesh = Mesh(param)\n\nOptional keyword arguments\n\nBoussinesq: if true (default is false), compute the standard Boussinesq system instead (see Boussinesq(param;kwargs));\na parameter α which determines the model solved:\nIf α = 1 (default), then the model has been introduced in Dinvay, Dutykh and Kalisch;\nIf α = 1/2, then the model is a quasilinear version;\nIf α < 1/2, then expect instabilities stemming from ill-posedness of the model.\nktol: tolerance of the low-pass Krasny filter (default is 0, i.e. no filtering);\ndealias: dealiasing with Orlicz rule 1-dealias/(dealias+2) (default is 0, i.e. no dealiasing);\nlabel: a label for future references (default is \"Whitham-Boussinesq\");\n\nReturn values\n\nGenerate necessary ingredients for solving an initial-value problem via solve!:\n\na function WhithamBoussinesq.f! to be called in explicit time-integration solvers;\na function WhithamBoussinesq.mapto which from (η,v) of type InitialData provides the raw data matrix on which computations are to be executed.\na function WhithamBoussinesq.mapfro which from such data matrix returns the Tuple of real vectors (η,v), where\nη is the surface deformation;\nv is the derivative of the trace of the velocity potential.\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.DeepQuadratic","page":"Models","title":"WaterWaves1D.DeepQuadratic","text":"DeepQuadratic(param;dealias,label)\n\nDefine an object of type AbstractModel in view of solving the initial-value problem for the quadratic deep-water model proposed by Akers and Milewski and Cheng, Granero-Belinchón, Shkoller and Milewski\n\nArguments\n\nparam is of type NamedTuple and must contain\n\nthe dimensionless parameters ϵ (nonlinearity);\nnumerical parameters to construct the mesh of collocation points as mesh = Mesh(param).\n\nOptional keyword arguments\n\ndealias: dealiasing with 1/3 Orlicz rule if true or no dealiasing if false (by default);\nlabel: a label for future references (default is \"deep quadratic\");\n\nReturn values\n\nGenerate necessary ingredients for solving an initial-value problem via solve!:\n\na function DeepQuadratic.f! to be called in explicit time-integration solvers;\na function DeepQuadratic.mapto which from (η,v) of type InitialData provides the raw data matrix on which computations are to be executed;\na function DeepQuadratic.mapfro which from such data matrix returns the Tuple of real vectors (η,v), where\nη is the surface deformation;\nv is given by ∂t η = - ∂x v.\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.DeepQuadratic_fast","page":"Models","title":"WaterWaves1D.DeepQuadratic_fast","text":"DeepQuadratic_fast(param;dealias,label)\n\nSame as DeepQuadratic, but faster.\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.IsobeKakinuma","page":"Models","title":"WaterWaves1D.IsobeKakinuma","text":"IsobeKakinuma(param;kwargs)\n\nDefine an object of type AbstractModel in view of solving the initial-value problem for the Isobe-Kakinuma model.\n\nArgument\n\nparam is of type NamedTuple (or a collection NamedTuples) of and must contain\n\ndimensionless parameters ϵ (nonlinearity) and μ (dispersion);\nnumerical parameters to construct the mesh of collocation points as mesh = Mesh(param).\n\nOptional keyword arguments\n\niterative: solve the elliptic problem through GMRES if true, LU decomposition if false (default is true);\nprecond: use a (left) preconditioner for GMRES if true (default), choose precond as the preconditioner if provided;\ngtol: relative tolerance of the GMRES algorithm (default is 1e-14);\nrestart: the corresponding option of the GMRES algorithm (default is 100);\nmaxiter: the corresponding option of GMRES (default is nothing);\nktol: tolerance of the Krasny filter (default is 0, i.e. no filtering);\ndealias: dealiasing with Orlicz rule 1-dealias/(dealias+2) (default is 0, i.e. no dealiasing);\nlabel: a label for future references (default is \"Isobe-Kakinuma\");\n\nReturn values\n\nGenerate necessary ingredients for solving an initial-value problem via solve!:\n\na function IsobeKakinuma.f! to be called in explicit time-integration solvers;\na function IsobeKakinuma.mapto which from (η,v) of type InitialData provides the raw data matrix on which computations are to be executed;\na function IsobeKakinuma.mapfro which from such data matrix returns the Tuple of real vectors (η,v), where\nη is the surface deformation;\nv is the derivative of the trace of the velocity potential;\nadditionally, a handy function IsobeKakinuma.mapfrofull which from data matrix returns the Tuple of real vectors (η,v,Φ), where\nΦ is the Vector of the basis functions ϕi (i∈{0,...,N}).\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.Matsuno","page":"Models","title":"WaterWaves1D.Matsuno","text":"Matsuno(param;dealias,label)\n\nDefine an object of type AbstractModel in view of solving the initial-value problem for the quadratic deep-water model proposed by Matsuno.\n\nArguments\n\nparam is of type NamedTuple and must contain\n\nthe dimensionless parameters ϵ (nonlinearity);\nnumerical parameters to construct the mesh of collocation points as mesh = Mesh(param).\n\nOptional keyword arguments\n\ndealias: dealiasing with 1/3 Orlicz rule if true or no dealiasing if false (by default);\nlabel: a label for future references (default is \"Matsuno\");\n\nReturn values\n\nGenerate necessary ingredients for solving an initial-value problem via solve!:\n\na function DeepQuadratic.f! to be called in explicit time-integration solvers;\na function DeepQuadratic.mapto which from (η,v) of type InitialData provides the raw data matrix on which computations are to be executed;\na function DeepQuadratic.mapfro which from such data matrix returns the Tuple of real vectors (η,v), where\nη is the surface deformation;\nv is a velocity variable which is not the derivative of the trace of the velocity potential (if not null).\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.Matsuno_fast","page":"Models","title":"WaterWaves1D.Matsuno_fast","text":"Matsuno_fast(param;dealias,label)\n\nSame as Matsuno, but faster.\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.modifiedMatsuno","page":"Models","title":"WaterWaves1D.modifiedMatsuno","text":"modifiedMatsuno(param;kwargs)\n\nDefine an object of type AbstractModel in view of solving the initial-value problem for the modified Matsuno model\n\nArgument\n\nparam is of type NamedTuple and must contain\n\ndimensionless parameters ϵ (nonlinearity) and μ (dispersion);\nnumerical parameters to construct the mesh of collocation points as mesh = Mesh(param)\n\nOptional keyword arguments\n\nν: shallow/deep water multiplication factor. By default, ν=1 if μ≦1 and ν=1/√μ otherwise. Set the infinite-layer case if ν=0 (or μ=Inf).\nIL: Set the infinite-layer case if IL=true (or μ=Inf, or ν=0), in which case ϵ is the steepness parameter. Default is false.\nktol: tolerance of the low-pass Krasny filter (default is 0, i.e. no filtering);\ndealias: dealiasing with Orlicz rule 1-dealias/(dealias+2) (default is 0, i.e. no dealiasing);\nlabel: a label for future references (default is \"modified Matsuno\");\n\nReturn values\n\nGenerate necessary ingredients for solving an initial-value problem via solve!:\n\na function modifiedMatsuno.f! to be called in explicit time-integration solvers;\na function modifiedMatsuno.mapto which from (η,v) of type InitialData provides the raw data matrix on which computations are to be executed;\na function modifiedMatsuno.mapfro which from such data matrix returns the Tuple of real vectors (η,v), where\nη is the surface deformation;\nv is the derivative of the trace of the velocity potential.\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.NonHydrostatic","page":"Models","title":"WaterWaves1D.NonHydrostatic","text":"NonHydrostatic(param;kwargs)\n\nDefine an object of type AbstractModel in view of solving the initial-value problem for the \"Non-hydrostatic\" model proposed by Bristeau, Mangeney, Sainte-Marie and Seguin\n\nArgument\n\nparam is of type NamedTuple and must contain\n\ndimensionless parameters ϵ (nonlinearity) and μ (dispersion);\nnumerical parameters to construct the mesh of collocation points as mesh = Mesh(param).\n\nOptional keyword arguments\n\niterative: solve the elliptic problem through GMRES if true, LU decomposition if false (default is true);\nprecond: use a (left) preconditioner for GMRES if true (default), choose precond as the preconditioner if provided;\ngtol: relative tolerance of the GMRES algorithm (default is 1e-14);\nrestart: the corresponding option of the GMRES algorithm (default is 100);\nmaxiter: the corresponding option of GMRES (default is nothing);\nktol: tolerance of the Krasny filter (default is 0, i.e. no filtering);\ndealias: dealiasing with Orlicz rule 1-dealias/(dealias+2) (default is 0, i.e. no dealiasing);\nlabel: a label for future references (default is \"non-hydrostatic\");\n\nReturn values\n\nGenerate necessary ingredients for solving an initial-value problem via solve!:\n\na function NonHydrostatic.f! to be called in explicit time-integration solvers;\na function NonHydrostatic.mapto which from (η,v) of type InitialData provides the raw data matrix on which computations are to be executed;\na function NonHydrostatic.mapfro which from such data matrix returns the Tuple of real vectors (η,v), where\nη is the surface deformation;\nv is the derivative of the trace of the velocity potential;\nadditionally, a handy function NonHydrostatic.mapfrofull which from data matrix returns the Tuple of real vectors (η,v,u), where\nu corresponds to the layer-averaged velocity.\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.CnoidalSGN","page":"Models","title":"WaterWaves1D.CnoidalSGN","text":"CnoidalSGN(param; P=1)\n\nBuild the initial data associated with CnoidalWaveSerreGreenNaghdi(param; P=1), of type InitialData, to be used in initial-value problems Problem(model, initial::InitialData, param).\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.SerreGreenNaghdi","page":"Models","title":"WaterWaves1D.SerreGreenNaghdi","text":"SerreGreenNaghdi(param;kwargs)\n\nDefine an object of type AbstractModel in view of solving the initial-value problem for the Serre-Green-Naghdi model\n\nArgument\n\nparam is of type NamedTuple and must contain\n\ndimensionless parameters ϵ (nonlinearity) and μ (dispersion);\nnumerical parameters to construct the mesh of collocation points as mesh = Mesh(param).\n\nOptional keyword arguments\n\niterative: solve the elliptic problem through GMRES if true, LU decomposition if false (default is true);\nprecond: use a (left) preconditioner for GMRES if true (default), choose precond as the preconditioner if provided;\ngtol: relative tolerance of the GMRES algorithm (default is 1e-14);\nrestart: the corresponding option of the GMRES algorithm (default is 100);\nmaxiter: the corresponding option of GMRES (default is nothing);\nktol: tolerance of the Krasny filter (default is 0, i.e. no filtering);\ndealias: dealiasing with Orlicz rule 1-dealias/(dealias+2) (default is 0, i.e. no dealiasing);\nlabel: a label for future references (default is \"Green-Naghdi\");\n\nReturn values\n\nGenerate necessary ingredients for solving an initial-value problem via solve!:\n\na function SerreGreenNaghdi.f! to be called in explicit time-integration solvers;\na function SerreGreenNaghdi.mapto which from (η,v) of type InitialData provides the raw data matrix on which computations are to be executed;\na function SerreGreenNaghdi.mapfro which from such data matrix returns the Tuple of real vectors (η,v), where\nη is the surface deformation;\nv is the derivative of the trace of the velocity potential;\nadditionally, a handy function SerreGreenNaghdi.mapfrofull which from data matrix returns the Tuple of real vectors (η,v,u), where\nu corresponds to the layer-averaged velocity.\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.SolitarySGN","page":"Models","title":"WaterWaves1D.SolitarySGN","text":"SolitarySGN(param; x₀=0)\n\nBuild the initial data associated with SolitaryWaveSerreGreenNaghdi(param; x₀=0), of type InitialData, to be used in initial-value problems Problem(model, initial::InitialData, param).\n\n\n\nSolitarySGN(c; ϵ=1,μ=1,x₀=0,N=2^12)\n\nBuild the initial data with velocity c, center x₀, dimensionless parameters ϵ and μ, and number of collocation points N.\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.SquareRootDepth","page":"Models","title":"WaterWaves1D.SquareRootDepth","text":"SquareRootDepth(param;kwargs)\n\nDefine an object of type AbstractModel in view of solving the initial-value problem for the \"√D\" model proposed by Cotter, Holm and Percival\n\nArgument\n\nparam is of type NamedTuple and must contain\n\ndimensionless parameters ϵ (nonlinearity) and μ (dispersion);\nnumerical parameters to construct the mesh of collocation points as mesh = Mesh(param).\n\nOptional keyword arguments\n\niterative: solve the elliptic problem through GMRES if true, LU decomposition if false (default is true);\nprecond: use a (left) preconditioner for GMRES if true (default), choose precond as the preconditioner if provided;\ngtol: relative tolerance of the GMRES algorithm (default is 1e-14);\nrestart: the corresponding option of the GMRES algorithm (default is 100);\nmaxiter: the corresponding option of GMRES (default is nothing);\nktol: tolerance of the Krasny filter (default is 0, i.e. no filtering);\ndealias: dealiasing with Orlicz rule 1-dealias/(dealias+2) (default is 0, i.e. no dealiasing);\nlabel: a label for future references (default is \"square-root depth\");\n\nReturn values\n\nGenerate necessary ingredients for solving an initial-value problem via solve!:\n\na function SquareRootDepth.f! to be called in explicit time-integration solvers;\na function SquareRootDepth.mapto which from (η,v) of type InitialData provides the raw data matrix on which computations are to be executed;\na function SquareRootDepth.mapfro which from such data matrix returns the Tuple of real vectors (η,v), where\nη is the surface deformation;\nv is the derivative of the trace of the velocity potential;\nadditionally, a handy function SquareRootDepth.mapfrofull which from data matrix returns the Tuple of real vectors (η,v,u), where\nu corresponds to the layer-averaged velocity.\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.WWn","page":"Models","title":"WaterWaves1D.WWn","text":"WWn(param;kwargs)\n\nDefine an object of type AbstractModel in view of solving the initial-value problem for the water waves expansion proposed by Dommermuth and Yue (doi:10.1017/s002211208700288x), West et al. (doi:10.1029/jc092ic11p11803), Craig and Sulem (doi:10.1006/jcph.1993.1164) (see also the account by Choi : Fifth-order nonlinear spectral model for surface gravity waves: From pseudo-spectral to spectral formulations, RIMS Kokyuroku, 2019) with the \"rectification\" method proposed by Duchêne and Melinand.\n\nArgument\n\nparam is of type NamedTuple and must contain\n\ndimensionless parameters ϵ (nonlinearity) and μ (dispersion);\nnumerical parameters to construct the mesh of collocation points as mesh = Mesh(param)\n\nOptional keyword arguments\n\nν: shallow/deep water multiplication factor. By default, ν=1 if μ≦1 and ν=1/√μ otherwise. Set the infinite-layer case if ν=0 (or μ=Inf).\nIL: Set the infinite-layer case if IL=true (or μ=Inf, or ν=0), in which case ϵ is the steepness parameter. Default is false.\nn :: Int: the order of the expansion; linear system if 1, quadratic if 2, cubic if 3, quartic if 4 (default and other values yield 2);\nδ and m: parameters of the rectifier operator, set as k->min(1,|δ*k|^m) or k->min(1,|δ*k|^m[1]*exp(1-|δ*k|^m[2])) if m is a couple\n\n(by default is δ=0, i.e. no regularization and m=-1. Notice m=-Inf and δ>0 yields a cut-off filter);\n\nktol: tolerance of the low-pass Krasny filter (default is 0, i.e. no filtering);\ndealias: dealiasing with Orlicz rule 1-dealias/(dealias+2) (default is 0, i.e. no dealiasing);\nlabel: a label for future references (default is \"WWn\" with n the order of the expansion);\n\nReturn values\n\nGenerate necessary ingredients for solving an initial-value problem via solve!:\n\na function WWn.f! to be called in explicit time-integration solvers (also WWn.f1! and WWn.f2! for the symplectic Euler solver);\na function WWn.mapto which from (η,v) of type InitialData provides the raw data matrix on which computations are to be executed;\na function WWn.mapfro which from such data matrix returns the Tuple of real vectors (η,v), where\nη is the surface deformation;\nv is the derivative of the trace of the velocity potential.\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.WaterWaves","page":"Models","title":"WaterWaves1D.WaterWaves","text":"WaterWaves(param; kwargs)\n\nDefine an object of type AbstractModel in view of solving the initial-value problem for the water waves system (via conformal mapping, see Zakharov, Dyachenko and Vasilyev).\n\nArgument\n\nparam is of type NamedTuple and must contain\n\ndimensionless parameters ϵ (nonlinearity) and μ (dispersion);\nnumerical parameters to construct the mesh of collocation points as mesh = Mesh(param).\n\nOptional keyword arguments\n\nν: shallow/deep water multiplication factor (see Lannes, The water waves problem). By default, ν=1 if μ≦1 and ν=1/√μ otherwise.\nIL: Set the infinite-layer case if IL=true (or μ=Inf, or ν=0), in which case ϵ is the steepness parameter. Default is false.\nmethod ∈ {1,2,3}: method used to initialize the conformal mapping, as a fix-point problem F(u)=u\nif method == 1, use standard contraction fix-point iteration;\nif method == 2, use Newton algorithm with GMRES iterative solver to invert the Jacobian;\nif method == 3, use Newton algorithm with direct solver to invert the Jacobian;\ntol: (relative) tolerance of the fix-point algorithm (default is 1e-16);\nmaxiter: the maximal number of iteration in the fix-point algorithm (default is 100);\nktol: tolerance of the low-pass Krasny filter (default is 0, i.e. no filtering);\ndealias: dealiasing with Orlicz rule 1-dealias/(dealias+2) (default is 0, i.e. no dealiasing);\nlabel: a label for future references (default is \"water waves\");\nverbose: prints information if true (default is true).\n\nReturn values\n\nGenerate necessary ingredients for solving an initial-value problem via solve!:\n\na function WaterWaves.f! to be called in the explicit time-integration solver (also WaterWaves.f1! and WaterWaves.f2! for the symplectic Euler solver);\na function WaterWaves.mapto which from (η,v) of type InitialData provides the raw data matrix on which computations are to be executed;\na function WaterWaves.mapfro which from such data matrix returns the Tuple of real vectors (x,η,v), where\nx is a vector of collocation points (non-regularly spaced);\nη is the surface deformation at points x;\nv is the derivative of the trace of the velocity potential at points x.\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.SolitaryWGN","page":"Models","title":"WaterWaves1D.SolitaryWGN","text":"SolitaryWGN(param; kwargs)\n\nBuild the initial data associated with SolitaryWaveWhithamGreenNaghdi(param; kwargs), of type InitialData, to be used in initial-value problems Problem(model, initial::InitialData, param).\n\n\n\nSolitaryWGN(c; ϵ=1,μ=1,N=2^12,kwargs)\n\nBuild the initial data with velocity c, dimensionless parameters ϵ and μ, and number of collocation points N, and kwargs the other (optional) keyword arguments as above.\n\n\n\n\n\n","category":"type"},{"location":"models/#WaterWaves1D.WhithamGreenNaghdi","page":"Models","title":"WaterWaves1D.WhithamGreenNaghdi","text":"WhithamGreenNaghdi(param;kwargs)\n\nDefine an object of type AbstractModel in view of solving the initial-value problem for the fully dispersive Green-Naghdi model proposed by Duchêne, Israwi and Talhouk.\n\nArgument\n\nparam is of type NamedTuple and must contain\n\ndimensionless parameters ϵ (nonlinearity) and μ (dispersion);\nnumerical parameters to construct the mesh of collocation points as mesh = Mesh(param).\n\nOptional keyword arguments\n\nSGN: if true (default is false), compute the Serre-Green-Naghdi (SGN) instead of Whitham-Green-Naghdi (WGN) system (see SerreGreenNaghdi(param;kwargs));\niterative: solve the elliptic problem through GMRES if true, LU decomposition if false (default is true);\nprecond: use a (left) preconditioner for GMRES if true (default), choose precond as the preconditioner if provided;\ngtol: relative tolerance of the GMRES algorithm (default is 1e-14);\nrestart: the corresponding option of the GMRES algorithm (default is 100);\nmaxiter: the corresponding option of GMRES (default is nothing);\nktol: tolerance of the Krasny filter (default is 0, i.e. no filtering);\ndealias: dealiasing with Orlicz rule 1-dealias/(dealias+2) (default is 0, i.e. no dealiasing);\nlabel: a label for future references (default is \"Whitham-Green-Naghdi\");\n\nReturn values\n\nGenerate necessary ingredients for solving an initial-value problem via solve!:\n\na function WhithamGreenNaghdi.f! to be called in explicit time-integration solvers;\na function WhithamGreenNaghdi.mapto which from (η,v) of type InitialData provides the raw data matrix on which computations are to be executed;\na function WhithamGreenNaghdi.mapfro which from such data matrix returns the Tuple of real vectors (η,v), where\nη is the surface deformation;\nv is the derivative of the trace of the velocity potential;\nadditionally, a handy function WhithamGreenNaghdi.mapfrofull which from data matrix returns the Tuple of real vectors (η,v,u), where\nu corresponds to the layer-averaged velocity.\n\n\n\n\n\n","category":"type"},{"location":"basics/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"figures/#Graphics","page":"Graphics","title":"Graphics","text":"","category":"section"},{"location":"figures/","page":"Graphics","title":"Graphics","text":"Modules = [WaterWaves1D]\nPages   = [\"figures.jl\"]","category":"page"},{"location":"figures/#WaterWaves1D.create_animation-Tuple{Any}","page":"Graphics","title":"WaterWaves1D.create_animation","text":"create_animation( problems; name::String, kwargs... )\n\nCreate an animation showing the evolution of initial-value problems.\n\nArgument problems is either an element or a collection (vector, list, etc.) of elements of type Problem.\n\nThe animation is saved as name.gif if name is provided.\n\nOther keyword arguments are as follows\n\nxlims allows to specifies the x axis limits for the surface deformation. If nothing is provided (default), then the full numerical basin is represented.\nylims allows to specifies the y axis limits for the surface deformation. If nothing is provided (default), then the limits are determined from the initial data. If anything but a Tuple is provided, the axis limits evolve with the solution.\nvlims and flims are as above, but for the velocity and Fourier coefficients plots.\nNframes gives the (maximal) number of frames in the animation.\nother arguments of plot_solution!\n\nReturn anim, an animation, which can then generate (for instance) a gif through gif(anim, \"my_name.gif\", fps=15).\n\n\n\n\n\n","category":"method"},{"location":"figures/#WaterWaves1D.plot_difference!-Tuple{Any, Any}","page":"Graphics","title":"WaterWaves1D.plot_difference!","text":"plot_difference!( plt, problems ; t,x,interpolation,compression,fast,surface,velocity,fourier,label )\n\nPlots in plt the difference between solutions of initial-value problems at a given time.\n\nArgument\n\npairs is a either a collection (vector, list, etc.) of elements of type Problem, or of pairs of such elements. If pairs are provided, then solutions of such problems are compared. If a collection of problems are provided, then all possible pairs are compared.\n\nKeyword arguments (all optional)\n\nt is the time. If not provided, then the last computed time is plotted.\nif a vector x is provided and if possible, the solution is interpolated to the collocation points x.\nif interpolation is provided as an integer, the solution is interpolated on as many collocation points (if true, then the value 2^3 is chosen, default is false).\nif fast = false (default is false), then the second problem is interpolated to the collocation points of the first problem.\nif compression is provided as an integer m, only one in m points are plotted (if true, then the value 2^3 is chosen, default is false).\nsurface, velocity and fourier (booleans) determine respectively whether surface deformation, η, tangential velocity, v, and the Fourier coefficients of η (in log-scale) are plotted.\nlabel defines the label(s) if provided (otherwise labels are inferred from the problems).\n\n\n\n\n\n","category":"method"},{"location":"figures/#WaterWaves1D.plot_difference-Tuple{Any}","page":"Graphics","title":"WaterWaves1D.plot_difference","text":"plot_difference( pairs; t,x, interpolation,compression, surface,velocity,fourier, label )\n\nSame as plot_difference! but generates and returns the plot.\n\n\n\n\n\n","category":"method"},{"location":"figures/#WaterWaves1D.plot_solution!-Tuple{Any, Any}","page":"Graphics","title":"WaterWaves1D.plot_solution!","text":"plot_solution!( plt; problems; t,x,interpolation,compression,surface,velocity,fourier,label )\n\nPlots in plt the solution of initial-value problems at a given time.\n\nArgument\n\nproblems is either an element or a collection (vector, list, etc.) of elements of type Problem.\n\nKeyword arguments (all optional)\n\nt is the time. If not provided, then the last computed time is plotted.\nif a vector x is provided and if possible, the solution is interpolated to the collocation points x.\nif interpolation is provided as an integer, the solution is interpolated on as many collocation points (if true, then the value 2^3 is chosen, default is false).\nif compression is provided as an integer m, only one in m points are plotted (if true, then the value 2^3 is chosen, default is false).\nsurface, velocity and fourier (booleans) determine respectively whether surface deformation, η, tangential velocity, v, and the Fourier coefficients of η (in log-scale) are plotted.\nlabel defines the label(s) if provided (otherwise labels are inferred from the problems)\n\n\n\n\n\n","category":"method"},{"location":"figures/#WaterWaves1D.plot_solution-Tuple{Any}","page":"Graphics","title":"WaterWaves1D.plot_solution","text":"plot_solution( problems; t,x, interpolation,compression, surface,velocity,fourier, label )\n\nSame as plot_solution! but generates and returns the plot.\n\n\n\n\n\n","category":"method"},{"location":"#WaterWaves1D.jl","page":"Home","title":"WaterWaves1D.jl","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"WaterWaves1D provides a framework to study and compare several models for the propagation of unidimensional surface gravity waves (a.k.a. \"water waves\").","category":"page"},{"location":"","page":"Home","title":"Home","text":"Several models are already implemented, included (but not limited to) the so-called water waves system, its truncated spectral expansion, the Green-Naghdi system, the Matsuno system, and so on. You may easily add your favorite one to the gang: see the how-to guide .","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(v1.0) pkg> add https://github.com/WaterWavesModels/WaterWaves1D.jl.git\nusing WaterWaves1D","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
